/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app/handlers/swaggerUIHandler.ts":
/*!**********************************************!*\
  !*** ./src/app/handlers/swaggerUIHandler.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.handler = void 0;\nconst handler = (event) => __awaiter(void 0, void 0, void 0, function* () {\n    let baseUrl;\n    const hostHeader = event.headers.Host || event.headers.host;\n    if (hostHeader) {\n        const isLocal = hostHeader.includes('localhost');\n        baseUrl = isLocal ? `http://${hostHeader}/${event.requestContext.stage}` : `https://${hostHeader}/${event.requestContext.stage}`;\n    }\n    else {\n        baseUrl = 'http://default-host';\n    }\n    const swaggerSpec = {\n        openapi: '3.0.0',\n        info: {\n            title: 'Customer API',\n            version: '1.0.0',\n            description: 'API para manejar información de clientes en SWars.',\n        },\n        servers: [\n            {\n                url: baseUrl,\n            },\n        ],\n        paths: {\n            '/customer': {\n                get: {\n                    summary: 'Lista todos los clientes',\n                    tags: ['customers'],\n                    responses: {\n                        '200': {\n                            description: 'Lista de clientes obtenida con éxito',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        type: 'array',\n                                        items: {\n                                            $ref: '#/components/schemas/Customer',\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                        '500': {\n                            description: 'Error interno del servidor',\n                        },\n                    },\n                },\n                post: {\n                    summary: 'Crea un nuevo cliente',\n                    tags: ['customers'],\n                    requestBody: {\n                        required: true,\n                        content: {\n                            'application/json': {\n                                schema: {\n                                    $ref: '#/components/schemas/Customer',\n                                },\n                            },\n                        },\n                    },\n                    responses: {\n                        '200': {\n                            description: 'Cliente creado con éxito',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        $ref: '#/components/schemas/Customer',\n                                    },\n                                },\n                            },\n                        },\n                        '400': {\n                            description: 'Datos de entrada no válidos',\n                        },\n                        '500': {\n                            description: 'Error interno del servidor',\n                        },\n                    },\n                },\n            },\n            '/customer/{id}': {\n                get: {\n                    summary: 'Obtiene la información de un cliente específico',\n                    tags: ['customers'],\n                    parameters: [\n                        {\n                            name: 'id',\n                            in: 'path',\n                            required: true,\n                            description: 'ID del cliente a obtener',\n                            schema: {\n                                type: 'integer',\n                                format: 'int64',\n                            },\n                        },\n                    ],\n                    responses: {\n                        '200': {\n                            description: 'Información detallada del cliente',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        $ref: '#/components/schemas/Customer',\n                                    },\n                                },\n                            },\n                        },\n                        '400': {\n                            description: 'ID del cliente no proporcionado o inválido',\n                        },\n                        '404': {\n                            description: 'Cliente no encontrado',\n                        },\n                        '500': {\n                            description: 'Error interno del servidor',\n                        },\n                    },\n                },\n                put: {\n                    summary: 'Actualiza la información de un cliente existente',\n                    tags: ['customers'],\n                    parameters: [\n                        {\n                            name: 'id',\n                            in: 'path',\n                            required: true,\n                            description: 'ID del cliente a actualizar',\n                            schema: {\n                                type: 'integer',\n                                format: 'int64',\n                            },\n                        },\n                    ],\n                    requestBody: {\n                        required: true,\n                        content: {\n                            'application/json': {\n                                schema: {\n                                    $ref: '#/components/schemas/Customer',\n                                },\n                            },\n                        },\n                    },\n                    responses: {\n                        '200': {\n                            description: 'Cliente actualizado con éxito',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        $ref: '#/components/schemas/Customer',\n                                    },\n                                },\n                            },\n                        },\n                        '400': {\n                            description: 'Datos de entrada no válidos',\n                        },\n                        '404': {\n                            description: 'Cliente no encontrado',\n                        },\n                        '500': {\n                            description: 'Error interno del servidor',\n                        },\n                    },\n                },\n                delete: {\n                    summary: 'Elimina un cliente existente',\n                    tags: ['customers'],\n                    parameters: [\n                        {\n                            name: 'id',\n                            in: 'path',\n                            required: true,\n                            description: 'ID del cliente a eliminar',\n                            schema: {\n                                type: 'integer',\n                                format: 'int64',\n                            },\n                        },\n                    ],\n                    responses: {\n                        '200': {\n                            description: 'Cliente eliminado con éxito',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        type: 'object',\n                                        properties: {\n                                            message: { type: 'string' },\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                        '400': {\n                            description: 'ID del cliente no proporcionado o inválido',\n                        },\n                        '404': {\n                            description: 'Cliente no encontrado',\n                        },\n                        '500': {\n                            description: 'Error interno del servidor',\n                        },\n                    },\n                },\n            },\n            '/customer/credit': {\n                post: {\n                    summary: 'Añade crédito disponible a un cliente',\n                    tags: ['customers'],\n                    requestBody: {\n                        required: true,\n                        content: {\n                            'application/json': {\n                                schema: {\n                                    type: 'object',\n                                    properties: {\n                                        customerId: { type: 'integer', format: 'int64' },\n                                        creditAmount: { type: 'number' },\n                                    },\n                                    required: ['customerId', 'creditAmount'],\n                                },\n                            },\n                        },\n                    },\n                    responses: {\n                        '200': {\n                            description: 'Crédito añadido con éxito',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        $ref: '#/components/schemas/Customer',\n                                    },\n                                },\n                            },\n                        },\n                        '400': {\n                            description: 'Datos de entrada no válidos',\n                        },\n                        '404': {\n                            description: 'Cliente no encontrado',\n                        },\n                        '500': {\n                            description: 'Error interno del servidor',\n                        },\n                    },\n                },\n            },\n            '/customer/credit/list': {\n                get: {\n                    summary: 'Lista todos los clientes ordenados por crédito disponible',\n                    tags: ['customers'],\n                    responses: {\n                        '200': {\n                            description: 'Lista de clientes obtenida con éxito',\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        type: 'array',\n                                        items: {\n                                            $ref: '#/components/schemas/Customer',\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                        '500': {\n                            description: 'Error interno del servidor',\n                        },\n                    },\n                },\n            },\n        },\n        components: {\n            schemas: {\n                Customer: {\n                    type: 'object',\n                    properties: {\n                        id: { type: 'number' },\n                        name: { type: 'string' },\n                        email: { type: 'string' },\n                        phoneNumber: { type: 'string' },\n                        address: { type: 'string' },\n                        availableCredit: { type: 'number' },\n                        created: { type: 'string', format: 'date-time' },\n                        edited: { type: 'string', format: 'date-time' },\n                    },\n                    required: ['name', 'email', 'phoneNumber', 'address', 'availableCredit'],\n                },\n            },\n        },\n    };\n    const swaggerSpecJsonString = JSON.stringify(swaggerSpec);\n    const swaggerUiHtml = `\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Swagger UI</title>\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.3.2/swagger-ui.css\">\r\n        <style>body { margin: 0; padding: 0; }</style>\r\n    </head>\r\n    <body>\r\n        <div id=\"swagger-ui\"></div>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.3.2/swagger-ui-bundle.js\"></script>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/5.3.2/swagger-ui-standalone-preset.js\"></script>\r\n        <script>\r\n            window.onload = () => {\r\n                window.ui = SwaggerUIBundle({\r\n                    spec: ${swaggerSpecJsonString},\r\n                    dom_id: '#swagger-ui',\r\n                    deepLinking: true,\r\n                    presets: [\r\n                        SwaggerUIBundle.presets.apis,\r\n                        SwaggerUIStandalonePreset\r\n                    ],\r\n                    layout: \"StandaloneLayout\"\r\n                });\r\n            };\r\n        </script>\r\n    </body>\r\n    </html>\r\n    `;\n    return {\n        statusCode: 200,\n        headers: {\n            'Content-Type': 'text/html',\n        },\n        body: swaggerUiHtml,\n    };\n});\nexports.handler = handler;\n\n\n//# sourceURL=webpack://swars/./src/app/handlers/swaggerUIHandler.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/app/handlers/swaggerUIHandler.ts"](0, __webpack_exports__);
/******/ 	var __webpack_export_target__ = exports;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;